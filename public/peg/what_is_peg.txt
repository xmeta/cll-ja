* PEG 文法の説明

(注) まちがいを含んでいる可能性が高いです

0. 構文解析で何がしたいのか

文字(あるいは音等やその他の記号)の並びから
意味を取り出したい。
文字の並びは一次元的な情報である。
つまり、ただのっぺりと、横一列に並んでいるだけである。
それに対して、「意味」というものはしばしば木構造を取る。
たとえば、3 + 2 * 4 - 5 / 3 は、文字列としては、
[3, +, 2, *, 4, -, 5, /, 3] といった感じに
一列に並んでいる。
しかし、意味を持った式として見たときに、これは

            '-'
             |
      +------+--------+
      |               |
     '+'             '/'
      |               |
  +---+-----+      +--+--+
  |         |      |     |
  3        '*'     5     3
            |
        +---+---+
        |       |
        2       4

このように木構造となっている。
つまり、文字の並びから木構造を作るのが構文解析器の役割
である。

1. 字句解析について

自然言語もプログラミング言語にも、単語と呼べる構造がある。
これは、意味のまとまりの最小単位であり、
これ以下の構造は意味に直接的に関らない。
たとえば「キリンビール」は「キリン」とは何らかの関係を持つが、
「キリ」とは何の関係もない。

最小単位の意味を持つ構造に分ける作業が字句解析であり、
この時点ではそれらの意味の素は一次元的に並んでいるだけである。

「私は私がロジバンを知ったその日からロジバンの可能性を追求している」
ならば、
[私, は, 私, が, ロジバン, を, 知った, その, 日, から, ロジバン,
の, 可能性, を, 追求して, いる]
のようになるだろう。

2. 構文解析について

上記で分けられた意味の素の並びから木構造を作る。
木構造には再帰的な定義が含まれる。

上の例で言えば、「私は私が ... 」は文であるが、
「私がロジバンを知った」も文である。
つまり、日本語では文そのものを名詞の前に置くことで、
それ自体を文の要素とすることができる。
これが再帰的な定義である。
上の例は構文解析すると以下のようになる。
[<私は><([<私が><ロジバンを><知った>](その)日)から>
<ロジバンの><可能性を><追求している>]

上の文を構文解析するには以下のような文法となるだろう。

文: 法部* 述部

法部: 名部 法制

名部: 修飾部* 名詞

修飾部: 文 / 修飾詞

修飾詞: その

名詞: 私 / ロジバン / 日 / 可能性

法制: は / が / を / から / の

述部: 知った / 追求して いる

3. BNF

ここらへんの、「全体を読めば決まる」といった程度の制約しか
持たない文法を、扱うのが BNF である。

4. 理想と現実

4-1. バックトラック
同じ文字列が何通りかに解釈されてしまうことがある。
一度とりあえずの解釈を決定したあとで、
後に続く構造からその解釈を決め直すことをバックトラックと呼ぶ。

例:
「君がくるまで」は「君が来るまで」と「君が車で」の
どちらとも解釈できる。
しかし「君がくるまで待とう」なら前者であり、
「君がくるまで来る」なら後者となる。
ここで、とりあえず「君が来るまで」と解釈していたのを、
「来る」が続いたために「君が車で」と解釈し直した場合に
バックトラックが生じたという。

4-2.
上記のような文法からそのまま素直に構文解析器を作ることはできる。
そして、それは技巧的にはとても簡単だ。
再帰的な関数を書いてやればとくに難しいことはない。
しかし、素直に作った場合、とてつもない回数の
バックトラックが生じてしまうことがしばしばある。
そのため、素直な実装はほとんど使いものにならない。

5. LR, LL
ここらへんは十分な理解はしていないので、
現在理解している範囲での説明とする。

バックトラックというものは大きなボトルネックとなる。
よって、バックトラックが生じないようにするために、LR法、LL法などがある。
これらは先読みの数 k によって LR(k)、LL(k) のように表される。
LALR は解析できる文法の広さと効率の間で調度良い点を取った LR と言える。
LALR(1) は 1 トークン先読みの LALR法であり、yacc はこれを使っている。

大雑把な言い方をすれば、LR はボトムアップであり、LL はトップダウンである。

簡単に言えば LR 法は、前から順に読みながら、まとめられるところでまとめる感じ。
LL法はむしろ全体を見て、その全体を徐々に細かく分けていくといった感じ。

6. PEG

LR や LL ではバックトラックを無くすことを目指した。
PEG においてはバックトラックを許すことで解析できる文法の幅を広げた。
ただし、そのバックトラックに制限を課すことで、線形時間で解析が終わるような
パーサの作成を可能にした。

つまり、バックトラックが生じるのは / の部分のみとなり、
一度値の決まった非終端記号においては、その値は変わらないということになる。

other = some 'c'
some = 'a' 'b' 'c' / 'a 'b'

のような文法で、"abc" を解析した場合に、
一度 some が "abc" という値になってしまえば
それ以上のバックトラックは生じないということになる。

(未完)

メモ:

正規文法 < 文脈自由文法 < 文脈依存文法 < 制限のない文法
LL < SL < LALR < LR < GLR
